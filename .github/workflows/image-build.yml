# need secrets env vars
# 1. DOCKERHUB_USERNAME
# 2. DOCKERHUB_TOKEN see...(https://qiita.com/fudekun/items/0dad3f2251cca992d7d4)

name: Build & Deploy
on:
  push:
    branches:
      - master

# https://docs.github.com/ja/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-google-cloud-platform#requesting-the-access-token
permissions:
  contents: "read"
  id-token: "write"

jobs:
  parameters:
    name: "Set parameters"
    runs-on: "ubuntu-latest"
    outputs:
      GITHUB_SHA: "${{ steps.GITHUB_SHA.outputs.GITHUB_SHA }}"
    steps:
      - id: "GITHUB_SHA"
        run: 'echo "::set-output name=GITHUB_SHA::$GITHUB_SHA"'

  build-and-push:
    needs: ["parameters"]
    runs-on: ubuntu-20.04

    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        target: ["client", "server", "worker"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # https://issueexplorer.com/issue/docker/build-push-action/423
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: name/app

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./${{ matrix.target }}
          push: true
          tags: cygnetops/multi-${{ matrix.target }}:latest,cygnetops/multi-${{ matrix.target }}:${{ needs.parameters.outputs.GITHUB_SHA }}

  gcp:
    needs: ["parameters", "build-and-push"]
    runs-on: ubuntu-latest
    # Add "id-token" with the intended permissions.

    env:
      PROJECT_ID: ${{ secrets.GKE_PROJECT_DEV }}
      PUSH_PATH: cygnetops
      GKE_CLUSTER: multi-cluster
      GKE_ZONE: us-central1-c

    steps:
      # https://qiita.com/yakamazu/items/b98d0ae314869f50a97f
      - name: Checkout
        uses: actions/checkout@v2

      # Install gcloud, do not specify authentication.
      - uses: "google-github-actions/setup-gcloud@master"
        with:
          project_id: ${{ secrets.GKE_PROJECT_DEV }}

      # Configure Workload Identity Federation and generate an access token.
      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v0.4.1"
        with:
          create_credentials_file: "true"
          # `providers/gha-provider==PROVIDER_NAME` see (https://zenn.dev/vvakame/articles/gha-and-gcp-workload-identity)
          workload_identity_provider: "projects/967344766275/locations/global/workloadIdentityPools/github-actions/providers/gha-provider"
          service_account: "travis-deployer@multi-k8s-333119.iam.gserviceaccount.com"
          access_token_lifetime: 1200s

      # Authenticate using the created credentials file.
      #
      # WARNING: The --cred-file flag is in preview and is subject to change.
      - id: "gcloud"
        name: "gcloud"
        env:
          CLOUDSDK_CORE_DISABLE_PROMPTS: 1
        run: |-

          # Now you can run gcloud commands authenticated as the impersonated service account.

          gcloud components update kubectl
          gcloud auth login --brief --cred-file="${{ steps.auth.outputs.credentials_file_path }}"
          gcloud config set project multi-k8s-333119
          gcloud config set compute/zone $GKE_ZONE
          gcloud container clusters get-credentials $GKE_CLUSTER

          gcloud --quiet auth configure-docker

      # https://github.com/google-github-actions/get-gke-credentials
      - id: get-credentials
        uses: google-github-actions/get-gke-credentials@v0.3.0
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      # kustomize を設定する
      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      - id: deploy-pods
        name: Deploy
        run: |-
          ../kustomize build k8s | kubectl apply -f -
          kubectl set image deployments/server-deployment server=$PUSH_PATH/multi-server-k8s:${{ needs.parameters.outputs.GITHUB_SHA }}
          kubectl set image deployments/client-deployment client=$PUSH_PATH/multi-client-k8s:${{ needs.parameters.outputs.GITHUB_SHA }}
          kubectl set image deployments/worker-deployment worker=$PUSH_PATH/multi-worker-k8s:${{ needs.parameters.outputs.GITHUB_SHA }}
